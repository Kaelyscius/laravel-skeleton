#!/bin/bash

# =============================================================================
# V√âRIFICATION AUTOMATIQUE COMPATIBILIT√â PACKAGES LARAVEL 12
# =============================================================================
#
# Ce script v√©rifie p√©riodiquement si les packages incompatibles avec Laravel 12
# sont devenus compatibles et les installe automatiquement.
#
# Usage:
#   ./scripts/check-package-compatibility.sh [--auto-install]
#
# Options:
#   --auto-install    Installer automatiquement les packages devenus compatibles
#   --list           Lister seulement les packages √† v√©rifier
#   --help           Afficher cette aide
#
# =============================================================================

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Charger les d√©pendances
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_DIR/lib/common.sh" ]; then
    source "$SCRIPT_DIR/lib/common.sh"
fi

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")  echo -e "${BLUE}[INFO $timestamp]${NC} $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN $timestamp]${NC} $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS $timestamp]${NC} $message" ;;
        "ERROR") echo -e "${RED}[ERROR $timestamp]${NC} $message" ;;
    esac
}

# Packages incompatibles connus avec Laravel 12
readonly INCOMPATIBLE_PACKAGES=(
    "beyondcode/laravel-query-detector"
    "driftingly/rector-laravel"
)

# Fonction d'aide
show_help() {
    echo -e "${CYAN}üîç V√©rification automatique compatibilit√© packages Laravel 12${NC}"
    echo -e "${CYAN}==========================================================${NC}"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --auto-install    Installer automatiquement les packages devenus compatibles"
    echo "  --list           Lister seulement les packages √† v√©rifier"
    echo "  --help           Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                    # V√©rifier seulement (dry-run)"
    echo "  $0 --auto-install    # V√©rifier et installer automatiquement"
    echo "  $0 --list           # Lister les packages incompatibles"
    echo ""
    echo "Packages actuellement incompatibles avec Laravel 12:"
    for package in "${INCOMPATIBLE_PACKAGES[@]}"; do
        echo "  ‚Ä¢ $package"
    done
}

# Lister les packages incompatibles
list_packages() {
    echo -e "${CYAN}üì¶ Packages incompatibles avec Laravel 12:${NC}"
    echo ""
    
    for package in "${INCOMPATIBLE_PACKAGES[@]}"; do
        echo -e "  ${YELLOW}‚Ä¢${NC} $package"
        
        # V√©rifier s'il est d√©j√† install√©
        if [ -f "composer.json" ] && grep -q "\"$package\"" composer.json; then
            echo -e "    ${GREEN}‚úì Actuellement install√©${NC}"
        else
            echo -e "    ${RED}‚úó Non install√©${NC}"
        fi
    done
    echo ""
}

# V√©rifier la compatibilit√© des packages
check_compatibility() {
    local auto_install="${1:-false}"
    
    log "INFO" "üîÑ D√©marrage v√©rification compatibilit√© Laravel 12..."
    
    if [ ! -f "composer.json" ]; then
        log "ERROR" "Fichier composer.json non trouv√©"
        return 1
    fi
    
    local compatible_packages=()
    local tested_count=0
    
    for package in "${INCOMPATIBLE_PACKAGES[@]}"; do
        tested_count=$((tested_count + 1))
        log "INFO" "Test $tested_count/${#INCOMPATIBLE_PACKAGES[@]}: $package"
        
        # V√©rifier si d√©j√† install√©
        if grep -q "\"$package\"" composer.json; then
            log "INFO" "‚úì $package d√©j√† install√©"
            continue
        fi
        
        # Tester la compatibilit√©
        if check_package_laravel12_compatibility "$package"; then
            log "SUCCESS" "üéâ $package est maintenant compatible avec Laravel 12!"
            compatible_packages+=("$package")
            
            if [ "$auto_install" = true ]; then
                log "INFO" "üì¶ Installation de $package..."
                if composer require --dev "$package" --no-interaction; then
                    log "SUCCESS" "‚úÖ $package install√© avec succ√®s"
                else
                    log "WARN" "‚ö†Ô∏è Installation de $package √©chou√©e"
                fi
            fi
        else
            log "INFO" "‚è≥ $package pas encore compatible"
        fi
        
        echo ""
    done
    
    # R√©sum√©
    echo -e "${CYAN}üìä R√âSUM√â:${NC}"
    echo "‚Ä¢ Packages test√©s: $tested_count"
    echo "‚Ä¢ Packages compatibles: ${#compatible_packages[@]}"
    
    if [ ${#compatible_packages[@]} -gt 0 ]; then
        echo "‚Ä¢ Nouveaux packages compatibles:"
        for package in "${compatible_packages[@]}"; do
            echo "  - $package"
        done
        
        if [ "$auto_install" = false ]; then
            echo ""
            log "INFO" "üí° Relancez avec --auto-install pour installer automatiquement"
        fi
    else
        echo "‚Ä¢ Aucun nouveau package compatible trouv√©"
    fi
    echo ""
    
    return 0
}

# Fonction principale
main() {
    local auto_install=false
    local list_only=false
    
    # Parser les arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --auto-install)
                auto_install=true
                shift
                ;;
            --list)
                list_only=true
                shift
                ;;
            --help|-h)
                show_help
                return 0
                ;;
            *)
                echo "Argument inconnu: $1"
                show_help
                return 1
                ;;
        esac
    done
    
    echo -e "${CYAN}üîç V√©rification automatique compatibilit√© Laravel 12${NC}"
    echo -e "${CYAN}=================================================${NC}"
    echo ""
    
    if [ "$list_only" = true ]; then
        list_packages
        return 0
    fi
    
    # V√©rifier l'environnement
    if ! command -v composer &> /dev/null; then
        log "ERROR" "Composer non trouv√©"
        return 1
    fi
    
    # Changer vers le r√©pertoire src si n√©cessaire
    if [ -d "src" ] && [ -f "src/composer.json" ]; then
        log "INFO" "üîÑ Changement vers le r√©pertoire src/"
        cd src
    fi
    
    # Lancer la v√©rification
    check_compatibility "$auto_install"
    
    log "SUCCESS" "‚úÖ V√©rification termin√©e"
}

# Ex√©cuter seulement si le script est appel√© directement
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
#!/bin/bash

# Script de scan de s√©curit√© avec Snyk
# Usage: ./scripts/security/snyk-scan.sh [options]

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Configuration par d√©faut
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
REPORTS_DIR="$PROJECT_ROOT/reports/security"
ENV_FILE="$PROJECT_ROOT/.env"

# Variables de configuration
SNYK_TOKEN=""
SNYK_SEVERITY_THRESHOLD="high"
SNYK_FAIL_ON_ISSUES="false"
SNYK_MONITOR_ENABLED="true"
SNYK_ORG_ID=""
SNYK_EXCLUDE_PATHS="vendor/,node_modules/,tests/,storage/"
SNYK_INCLUDE_DEV_DEPS="true"
SNYK_PRINT_DEPS="false"
SNYK_DOCKER_SCAN_ENABLED="false"
SNYK_PROJECT_NAME_PHP=""
SNYK_PROJECT_NAME_NODE=""

# Fonction de logging
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    case $level in
        "INFO")
            echo -e "${BLUE}[INFO $timestamp]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN $timestamp]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR $timestamp]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS $timestamp]${NC} $message"
            ;;
        "DEBUG")
            if [ "$VERBOSE" = "true" ]; then
                echo -e "${PURPLE}[DEBUG $timestamp]${NC} $message"
            fi
            ;;
    esac
}

# Fonction pour charger la configuration depuis .env
load_env_config() {
    log "INFO" "üìã Chargement de la configuration depuis .env..."

    if [ -f "$ENV_FILE" ]; then
        # Charger les variables depuis .env en √©vitant les conflits
        while IFS= read -r line; do
            # Ignorer les commentaires et lignes vides
            if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
                continue
            fi

            # Extraire la variable et sa valeur
            if [[ "$line" =~ ^([A-Z_]+)=(.*)$ ]]; then
                var_name="${BASH_REMATCH[1]}"
                var_value="${BASH_REMATCH[2]}"

                # Supprimer les guillemets si pr√©sents
                var_value=$(echo "$var_value" | sed 's/^["'\'']//' | sed 's/["'\'']$//')

                # Assigner les variables Snyk
                case $var_name in
                    "SNYK_TOKEN")
                        SNYK_TOKEN="$var_value"
                        ;;
                    "SNYK_SEVERITY_THRESHOLD")
                        SNYK_SEVERITY_THRESHOLD="$var_value"
                        ;;
                    "SNYK_FAIL_ON_ISSUES")
                        SNYK_FAIL_ON_ISSUES="$var_value"
                        ;;
                    "SNYK_MONITOR_ENABLED")
                        SNYK_MONITOR_ENABLED="$var_value"
                        ;;
                    "SNYK_ORG_ID")
                        SNYK_ORG_ID="$var_value"
                        ;;
                    "SNYK_EXCLUDE_PATHS")
                        SNYK_EXCLUDE_PATHS="$var_value"
                        ;;
                    "SNYK_INCLUDE_DEV_DEPS")
                        SNYK_INCLUDE_DEV_DEPS="$var_value"
                        ;;
                    "SNYK_PRINT_DEPS")
                        SNYK_PRINT_DEPS="$var_value"
                        ;;
                    "SNYK_DOCKER_SCAN_ENABLED")
                        SNYK_DOCKER_SCAN_ENABLED="$var_value"
                        ;;
                    "SNYK_PROJECT_NAME_PHP")
                        SNYK_PROJECT_NAME_PHP="$var_value"
                        ;;
                    "SNYK_PROJECT_NAME_NODE")
                        SNYK_PROJECT_NAME_NODE="$var_value"
                        ;;
                    "APP_NAME")
                        # Utiliser APP_NAME pour g√©n√©rer les noms de projet par d√©faut
                        if [ -z "$SNYK_PROJECT_NAME_PHP" ]; then
                            SNYK_PROJECT_NAME_PHP="${var_value}-php"
                        fi
                        if [ -z "$SNYK_PROJECT_NAME_NODE" ]; then
                            SNYK_PROJECT_NAME_NODE="${var_value}-node"
                        fi
                        ;;
                esac
            fi
        done < "$ENV_FILE"

        log "SUCCESS" "Configuration charg√©e depuis .env"
    else
        log "WARN" "Fichier .env non trouv√©, utilisation des valeurs par d√©faut"
    fi

    # Configuration par d√©faut pour les noms de projet si non d√©finis
    if [ -z "$SNYK_PROJECT_NAME_PHP" ]; then
        SNYK_PROJECT_NAME_PHP="laravel-php"
    fi
    if [ -z "$SNYK_PROJECT_NAME_NODE" ]; then
        SNYK_PROJECT_NAME_NODE="laravel-node"
    fi
}

# Fonction pour afficher la configuration
show_config() {
    log "INFO" "üîß Configuration Snyk active:"
    echo -e "  ${CYAN}‚Ä¢ Token configur√©:${NC} $([ -n "$SNYK_TOKEN" ] && echo "‚úÖ Oui (${SNYK_TOKEN:0:10}...)" || echo "‚ùå Non")"
    echo -e "  ${CYAN}‚Ä¢ Seuil de s√©v√©rit√©:${NC} $SNYK_SEVERITY_THRESHOLD"
    echo -e "  ${CYAN}‚Ä¢ √âchec sur vuln√©rabilit√©s:${NC} $SNYK_FAIL_ON_ISSUES"
    echo -e "  ${CYAN}‚Ä¢ Monitoring activ√©:${NC} $SNYK_MONITOR_ENABLED"
    echo -e "  ${CYAN}‚Ä¢ Organisation:${NC} $([ -n "$SNYK_ORG_ID" ] && echo "$SNYK_ORG_ID" || echo "Par d√©faut")"
    echo -e "  ${CYAN}‚Ä¢ Nom projet PHP:${NC} $SNYK_PROJECT_NAME_PHP"
    echo -e "  ${CYAN}‚Ä¢ Nom projet Node:${NC} $SNYK_PROJECT_NAME_NODE"
    echo -e "  ${CYAN}‚Ä¢ Inclure dev deps:${NC} $SNYK_INCLUDE_DEV_DEPS"
    echo -e "  ${CYAN}‚Ä¢ Scan Docker:${NC} $SNYK_DOCKER_SCAN_ENABLED"
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log "INFO" "üîç V√©rification des pr√©requis..."

    # V√©rifier si Snyk CLI est install√©
    if ! command -v snyk &> /dev/null; then
        log "ERROR" "Snyk CLI n'est pas install√©"
        log "INFO" "üí° Installation avec npm: npm install -g snyk"
        log "INFO" "üí° Ou avec Homebrew: brew install snyk/tap/snyk"
        exit 1
    fi

    # V√©rifier la version de Snyk
    local snyk_version=$(snyk --version 2>/dev/null || echo "unknown")
    log "SUCCESS" "Snyk CLI install√© (version: $snyk_version)"

    # Authentification Snyk
    if [ -n "$SNYK_TOKEN" ]; then
        log "INFO" "üîê Authentification avec le token Snyk..."
        if echo "$SNYK_TOKEN" | snyk auth --stdin 2>/dev/null; then
            log "SUCCESS" "Authentification Snyk r√©ussie"
        else
            log "WARN" "√âchec de l'authentification Snyk, scan en mode limit√©"
        fi
    else
        log "WARN" "Token Snyk non configur√©, scan en mode limit√©"
        log "INFO" "üí° Configurez SNYK_TOKEN dans .env pour toutes les fonctionnalit√©s"
    fi
}

# Fonction pour cr√©er le r√©pertoire des rapports
prepare_reports_dir() {
    mkdir -p "$REPORTS_DIR"
    log "DEBUG" "R√©pertoire des rapports cr√©√©: $REPORTS_DIR"
}

# Fonction pour scanner les d√©pendances Composer (PHP)
scan_composer_dependencies() {
    local composer_file="$PROJECT_ROOT/src/composer.json"
    local composer_lock="$PROJECT_ROOT/src/composer.lock"

    if [ ! -f "$composer_file" ]; then
        log "WARN" "üì¶ Pas de composer.json trouv√© dans src/, skip du scan PHP"
        return 0
    fi

    log "INFO" "üêò Scan des d√©pendances Composer (PHP)..."

    # Construire les options Snyk
    local snyk_options=(
        "--file=$composer_file"
        "--severity-threshold=$SNYK_SEVERITY_THRESHOLD"
        "--json"
    )

    # Ajouter l'organisation si configur√©e
    if [ -n "$SNYK_ORG_ID" ]; then
        snyk_options+=("--org=$SNYK_ORG_ID")
    fi

    # Inclure les d√©pendances de d√©veloppement si configur√©
    if [ "$SNYK_INCLUDE_DEV_DEPS" = "true" ]; then
        snyk_options+=("--dev")
    fi

    # Ex√©cuter le scan avec gestion des erreurs
    local report_file="$REPORTS_DIR/snyk-composer-$(date +%Y%m%d-%H%M%S).json"
    local exit_code=0

    cd "$PROJECT_ROOT/src"

    if snyk test "${snyk_options[@]}" > "$report_file" 2>&1; then
        log "SUCCESS" "‚úÖ Aucune vuln√©rabilit√© critique trouv√©e dans les d√©pendances PHP"
    else
        exit_code=$?
        log "WARN" "‚ö†Ô∏è Vuln√©rabilit√©s trouv√©es dans les d√©pendances PHP"

        # Extraire et afficher un r√©sum√©
        if command -v jq &> /dev/null && [ -f "$report_file" ]; then
            local high_count=$(jq -r '.vulnerabilities[] | select(.severity=="high") | .id' "$report_file" 2>/dev/null | wc -l)
            local critical_count=$(jq -r '.vulnerabilities[] | select(.severity=="critical") | .id' "$report_file" 2>/dev/null | wc -l)
            log "INFO" "üìä R√©sum√© PHP: $critical_count critiques, $high_count √©lev√©es"
        fi
    fi

    log "INFO" "üìÑ Rapport sauvegard√©: $report_file"
    cd "$PROJECT_ROOT"

    # Gestion de l'√©chec selon la configuration
    if [ "$SNYK_FAIL_ON_ISSUES" = "true" ] && [ $exit_code -ne 0 ]; then
        log "ERROR" "Scan PHP √©chou√© et SNYK_FAIL_ON_ISSUES=true"
        return $exit_code
    fi

    return 0
}

# Fonction pour scanner les d√©pendances NPM (Node.js)
scan_npm_dependencies() {
    local package_file="$PROJECT_ROOT/src/package.json"
    local package_lock="$PROJECT_ROOT/src/package-lock.json"

    if [ ! -f "$package_file" ]; then
        log "WARN" "üì¶ Pas de package.json trouv√© dans src/, skip du scan Node.js"
        return 0
    fi

    log "INFO" "üì¶ Scan des d√©pendances NPM (Node.js)..."

    # Construire les options Snyk
    local snyk_options=(
        "--file=$package_file"
        "--severity-threshold=$SNYK_SEVERITY_THRESHOLD"
        "--json"
    )

    # Ajouter l'organisation si configur√©e
    if [ -n "$SNYK_ORG_ID" ]; then
        snyk_options+=("--org=$SNYK_ORG_ID")
    fi

    # Inclure les d√©pendances de d√©veloppement si configur√©
    if [ "$SNYK_INCLUDE_DEV_DEPS" = "true" ]; then
        snyk_options+=("--dev")
    fi

    # Ex√©cuter le scan avec gestion des erreurs
    local report_file="$REPORTS_DIR/snyk-npm-$(date +%Y%m%d-%H%M%S).json"
    local exit_code=0

    cd "$PROJECT_ROOT/src"

    if snyk test "${snyk_options[@]}" > "$report_file" 2>&1; then
        log "SUCCESS" "‚úÖ Aucune vuln√©rabilit√© critique trouv√©e dans les d√©pendances Node.js"
    else
        exit_code=$?
        log "WARN" "‚ö†Ô∏è Vuln√©rabilit√©s trouv√©es dans les d√©pendances Node.js"

        # Extraire et afficher un r√©sum√©
        if command -v jq &> /dev/null && [ -f "$report_file" ]; then
            local high_count=$(jq -r '.vulnerabilities[] | select(.severity=="high") | .id' "$report_file" 2>/dev/null | wc -l)
            local critical_count=$(jq -r '.vulnerabilities[] | select(.severity=="critical") | .id' "$report_file" 2>/dev/null | wc -l)
            log "INFO" "üìä R√©sum√© Node.js: $critical_count critiques, $high_count √©lev√©es"
        fi
    fi

    log "INFO" "üìÑ Rapport sauvegard√©: $report_file"
    cd "$PROJECT_ROOT"

    # Gestion de l'√©chec selon la configuration
    if [ "$SNYK_FAIL_ON_ISSUES" = "true" ] && [ $exit_code -ne 0 ]; then
        log "ERROR" "Scan Node.js √©chou√© et SNYK_FAIL_ON_ISSUES=true"
        return $exit_code
    fi

    return 0
}

# Fonction pour scanner les images Docker (optionnel)
scan_docker_images() {
    if [ "$SNYK_DOCKER_SCAN_ENABLED" != "true" ]; then
        log "DEBUG" "Scan Docker d√©sactiv√©"
        return 0
    fi

    log "INFO" "üê≥ Scan des images Docker..."

    # Liste des images √† scanner
    local images=(
        "php:8.4-fpm-alpine"
        "httpd:2.4-alpine"
        "mariadb:latest"
        "redis:alpine"
        "node:20-alpine"
    )

    for image in "${images[@]}"; do
        log "INFO" "üîç Scan de l'image: $image"

        local report_file="$REPORTS_DIR/snyk-docker-$(echo $image | tr ':/' '-')-$(date +%Y%m%d-%H%M%S).json"

        if snyk container test "$image" --severity-threshold="$SNYK_SEVERITY_THRESHOLD" --json > "$report_file" 2>&1; then
            log "SUCCESS" "‚úÖ Image $image: aucune vuln√©rabilit√© critique"
        else
            log "WARN" "‚ö†Ô∏è Vuln√©rabilit√©s trouv√©es dans l'image $image"
            log "INFO" "üìÑ Rapport: $report_file"
        fi
    done
}

# Fonction pour activer le monitoring Snyk
enable_monitoring() {
    if [ "$SNYK_MONITOR_ENABLED" != "true" ] || [ -z "$SNYK_TOKEN" ]; then
        log "DEBUG" "Monitoring Snyk d√©sactiv√© ou token manquant"
        return 0
    fi

    log "INFO" "üìä Activation du monitoring Snyk..."

    # Monitoring des d√©pendances PHP
    if [ -f "$PROJECT_ROOT/src/composer.json" ]; then
        cd "$PROJECT_ROOT/src"

        local monitor_options=(
            "--file=composer.json"
            "--project-name=$SNYK_PROJECT_NAME_PHP"
        )

        if [ -n "$SNYK_ORG_ID" ]; then
            monitor_options+=("--org=$SNYK_ORG_ID")
        fi

        if snyk monitor "${monitor_options[@]}" 2>/dev/null; then
            log "SUCCESS" "‚úÖ Monitoring PHP activ√©: $SNYK_PROJECT_NAME_PHP"
        else
            log "WARN" "‚ö†Ô∏è √âchec de l'activation du monitoring PHP"
        fi

        cd "$PROJECT_ROOT"
    fi

    # Monitoring des d√©pendances Node.js
    if [ -f "$PROJECT_ROOT/src/package.json" ]; then
        cd "$PROJECT_ROOT/src"

        local monitor_options=(
            "--file=package.json"
            "--project-name=$SNYK_PROJECT_NAME_NODE"
        )

        if [ -n "$SNYK_ORG_ID" ]; then
            monitor_options+=("--org=$SNYK_ORG_ID")
        fi

        if snyk monitor "${monitor_options[@]}" 2>/dev/null; then
            log "SUCCESS" "‚úÖ Monitoring Node.js activ√©: $SNYK_PROJECT_NAME_NODE"
        else
            log "WARN" "‚ö†Ô∏è √âchec de l'activation du monitoring Node.js"
        fi

        cd "$PROJECT_ROOT"
    fi
}

# Fonction pour g√©n√©rer un rapport consolid√©
generate_summary_report() {
    log "INFO" "üìã G√©n√©ration du rapport de synth√®se..."

    local summary_file="$REPORTS_DIR/snyk-summary-$(date +%Y%m%d-%H%M%S).md"

    cat > "$summary_file" << EOF
# üõ°Ô∏è Rapport de S√©curit√© Snyk

**Date**: $(date '+%Y-%m-%d %H:%M:%S')
**Projet**: $(basename "$PROJECT_ROOT")
**Configuration**: $SNYK_SEVERITY_THRESHOLD et plus

## üìä R√©sum√©

### D√©pendances PHP (Composer)
$([ -f "$PROJECT_ROOT/src/composer.json" ] && echo "‚úÖ Scann√©" || echo "‚ö†Ô∏è Non trouv√©")

### D√©pendances Node.js (NPM)
$([ -f "$PROJECT_ROOT/src/package.json" ] && echo "‚úÖ Scann√©" || echo "‚ö†Ô∏è Non trouv√©")

### Images Docker
$([ "$SNYK_DOCKER_SCAN_ENABLED" = "true" ] && echo "‚úÖ Scann√©" || echo "‚ùå D√©sactiv√©")

### Monitoring Snyk
$([ "$SNYK_MONITOR_ENABLED" = "true" ] && [ -n "$SNYK_TOKEN" ] && echo "‚úÖ Activ√©" || echo "‚ùå D√©sactiv√©")

## üìÅ Rapports d√©taill√©s

Les rapports JSON d√©taill√©s sont disponibles dans:
\`$REPORTS_DIR\`

## üîß Configuration

- **Token Snyk**: $([ -n "$SNYK_TOKEN" ] && echo "Configur√©" || echo "Non configur√©")
- **Seuil de s√©v√©rit√©**: $SNYK_SEVERITY_THRESHOLD
- **√âchec sur vuln√©rabilit√©s**: $SNYK_FAIL_ON_ISSUES
- **Organisation**: $([ -n "$SNYK_ORG_ID" ] && echo "$SNYK_ORG_ID" || echo "Par d√©faut")

## üí° Actions recommand√©es

1. Consultez les rapports JSON pour les d√©tails
2. Mettez √† jour les d√©pendances vuln√©rables
3. Configurez le monitoring pour un suivi continu
4. Int√©grez les scans dans votre CI/CD

---
*G√©n√©r√© par le script Snyk de l'environnement Laravel*
EOF

    log "SUCCESS" "üìÑ Rapport de synth√®se g√©n√©r√©: $summary_file"
}

# Fonction d'affichage de l'aide
show_help() {
    cat << EOF
üõ°Ô∏è Script de scan de s√©curit√© Snyk pour Laravel

USAGE:
    ./scripts/security/snyk-scan.sh [OPTIONS]

OPTIONS:
    -h, --help              Afficher cette aide
    -v, --verbose           Mode verbeux (debug)
    --config                Afficher la configuration active
    --php-only              Scanner uniquement les d√©pendances PHP
    --node-only             Scanner uniquement les d√©pendances Node.js
    --docker-only           Scanner uniquement les images Docker
    --no-monitor            D√©sactiver le monitoring pour cette ex√©cution
    --fail-on-issues        Faire √©chouer le script en cas de vuln√©rabilit√©s
    --severity LEVEL        Seuil de s√©v√©rit√© (low|medium|high|critical)
    --report-dir DIR        R√©pertoire des rapports (d√©faut: reports/security)

EXAMPLES:
    # Scan complet avec configuration .env
    ./scripts/security/snyk-scan.sh

    # Scan des d√©pendances PHP uniquement
    ./scripts/security/snyk-scan.sh --php-only

    # Scan avec seuil critique seulement
    ./scripts/security/snyk-scan.sh --severity critical

    # Scan sans monitoring
    ./scripts/security/snyk-scan.sh --no-monitor

CONFIGURATION:
    Le script utilise les variables du fichier .env:
    - SNYK_TOKEN: Token d'authentification Snyk
    - SNYK_SEVERITY_THRESHOLD: Seuil de s√©v√©rit√© (d√©faut: high)
    - SNYK_FAIL_ON_ISSUES: √âchec en cas de vuln√©rabilit√©s (d√©faut: false)
    - SNYK_MONITOR_ENABLED: Activation du monitoring (d√©faut: true)

    Obtenez votre token sur: https://app.snyk.io/account

EOF
}

# Fonction principale
main() {
    local php_only=false
    local node_only=false
    local docker_only=false
    local no_monitor=false
    local show_config_only=false

    # Parse des arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            --config)
                show_config_only=true
                shift
                ;;
            --php-only)
                php_only=true
                shift
                ;;
            --node-only)
                node_only=true
                shift
                ;;
            --docker-only)
                docker_only=true
                shift
                ;;
            --no-monitor)
                no_monitor=true
                shift
                ;;
            --fail-on-issues)
                SNYK_FAIL_ON_ISSUES=true
                shift
                ;;
            --severity)
                SNYK_SEVERITY_THRESHOLD="$2"
                shift 2
                ;;
            --report-dir)
                REPORTS_DIR="$2"
                shift 2
                ;;
            *)
                log "ERROR" "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done

    # Initialisation
    log "INFO" "üõ°Ô∏è D√©marrage du scan de s√©curit√© Snyk"

    load_env_config

    if [ "$show_config_only" = "true" ]; then
        show_config
        exit 0
    fi

    show_config
    check_prerequisites
    prepare_reports_dir

    # Ex√©cution des scans selon les options
    local scan_count=0
    local failed_scans=0

    if [ "$docker_only" = "true" ]; then
        scan_docker_images || ((failed_scans++))
        ((scan_count++))
    elif [ "$php_only" = "true" ]; then
        scan_composer_dependencies || ((failed_scans++))
        ((scan_count++))
    elif [ "$node_only" = "true" ]; then
        scan_npm_dependencies || ((failed_scans++))
        ((scan_count++))
    else
        # Scan complet
        scan_composer_dependencies || ((failed_scans++))
        ((scan_count++))

        scan_npm_dependencies || ((failed_scans++))
        ((scan_count++))

        scan_docker_images || ((failed_scans++))
        ((scan_count++))
    fi

    # Monitoring (sauf si d√©sactiv√©)
    if [ "$no_monitor" != "true" ] && [ "$docker_only" != "true" ]; then
        enable_monitoring
    fi

    # G√©n√©ration du rapport de synth√®se
    generate_summary_report

    # R√©sum√© final
    log "INFO" "üéØ Scan termin√© - $scan_count scans ex√©cut√©s"

    if [ $failed_scans -gt 0 ]; then
        log "WARN" "‚ö†Ô∏è $failed_scans scan(s) avec vuln√©rabilit√©s d√©tect√©es"
        log "INFO" "üìÑ Consultez les rapports dans: $REPORTS_DIR"

        if [ "$SNYK_FAIL_ON_ISSUES" = "true" ]; then
            log "ERROR" "√âchec du script (SNYK_FAIL_ON_ISSUES=true)"
            exit 1
        fi
    else
        log "SUCCESS" "‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e"
    fi

    log "INFO" "üîó Consultez vos projets sur: https://app.snyk.io/projects"
}

# Ex√©cuter le script si appel√© directement
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
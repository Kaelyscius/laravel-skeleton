#!/bin/bash

# =============================================================================
# MODULE D'INSTALLATION DES PACKAGES DE D√âVELOPPEMENT
# =============================================================================
#
# Ce module installe les packages Laravel pour le d√©veloppement,
# incluant les outils de debug, test, IDE helpers, etc.
#
# =============================================================================

set -e

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/logging.sh"
source "$SCRIPT_DIR/../lib/common.sh"
source "$SCRIPT_DIR/../lib/laravel.sh"

init_logging "40-packages-dev"

# NOTE: Les packages de d√©veloppement sont maintenant lus depuis config/installer.yml
# via get_packages_from_config() (CONFORM√âMENT AU PROMPT)

main() {
    local laravel_dir="${1:-$(detect_working_directory)}"
    local start_time=$(date +%s)
    
    log_separator "INSTALLATION PACKAGES D√âVELOPPEMENT"
    log_info "üõ†Ô∏è Installation des packages de d√©veloppement dans: $laravel_dir"
    
    cd "$laravel_dir"
    
    if ! is_laravel_project "$laravel_dir"; then
        log_fatal "Pas un projet Laravel: $laravel_dir"
    fi
    
    # Lire les packages depuis config/installer.yml (CONFORM√âMENT AU PROMPT)
    log_info "üìã Lecture des packages de d√©veloppement depuis config/installer.yml..."
    
    # Obtenir la liste des packages depuis le YAML
    local packages_list
    if ! packages_list=$(get_packages_from_config "development"); then
        log_error "Impossible de lire les packages de d√©veloppement depuis la configuration"
        return 1
    fi
    
    # Installer chaque package
    while IFS= read -r package_name; do
        # Ignorer les lignes vides
        [ -z "$package_name" ] && continue
        
        # V√©rifier la compatibilit√© Laravel pour certains packages
        local laravel_version=$(get_laravel_version | cut -d. -f1)
        if [ "$package_name" = "enlightn/enlightn" ] && [ "$laravel_version" -ge 12 ]; then
            log_info "üîß $package_name ignor√© - utiliser ivqonsanada/enlightn pour Laravel $laravel_version"
            continue
        fi
        
        # V√©rifier la compatibilit√© Laravel g√©n√©rale
        if ! is_package_laravel_compatible "$package_name" "development"; then
            local max_laravel=$(get_package_max_laravel_version "$package_name" "development")
            local current_laravel=$(get_laravel_version | cut -d. -f1)
            log_warn "‚ö†Ô∏è $package_name ignor√© - Laravel <= $max_laravel requis, vous avez Laravel $current_laravel"
            continue
        fi
        
        # V√©rifier la compatibilit√© PHP
        if ! is_package_php_compatible "$package_name" "development"; then
            local required_php=$(get_package_php_version "$package_name" "development")
            local current_php=$(get_php_version)
            log_warn "‚ö†Ô∏è $package_name ignor√© - PHP $required_php requis, vous avez $current_php"
            continue
        fi
        
        # Obtenir la version depuis la configuration
        local version=$(get_package_version "$package_name" "development")
        
        # V√©rifier si le package est requis
        if is_package_required "$package_name" "development"; then
            log_debug "üì¶ Package requis: $package_name:$version"
        else
            log_debug "üì¶ Package optionnel: $package_name:$version"
        fi
        
        if ! is_package_installed "$package_name"; then
            log_info "Installation de $package_name:$version..."
            if install_composer_package "$package_name" "$version" "require-dev"; then
                log_success "‚úÖ $package_name install√©"
            else
                if is_package_required "$package_name" "development"; then
                    log_error "‚ùå √âchec installation package requis: $package_name"
                else
                    log_warn "‚ö†Ô∏è √âchec installation package optionnel: $package_name"
                fi
            fi
        else
            log_debug "‚úì $package_name d√©j√† install√©"
        fi
    done <<< "$packages_list"
    
    # Post-installation pour Enlightn Laravel 12 (fork ivqonsanada)
    local laravel_version=$(get_laravel_version | cut -d. -f1)
    if [ "$laravel_version" -ge 12 ]; then
        # V√©rifier si le fork Enlightn est install√©
        if is_package_installed "ivqonsanada/enlightn"; then
            log_info "üîß Configuration Enlightn pour Laravel 12..."
            
            # Publier la config Enlightn si pas encore fait
            if [ ! -f config/enlightn.php ]; then
                log_info "Publication de la configuration Enlightn..."
                php artisan vendor:publish --tag=enlightn 2>&1 | tee -a "$LOG_FILE" || log_debug "Publish Enlightn config ignor√©"
            fi
            
            # Corriger le path analyzer pour le fork
            if [ -f config/enlightn.php ]; then
                log_info "Correction du path analyzer pour le fork ivqonsanada/enlightn..."
                
                # Backup de la config originale
                cp config/enlightn.php config/enlightn.php.backup 2>/dev/null || true
                
                # Mise √† jour du path avec sed
                sed -i "s|vendor/enlightn/enlightn/src/Analyzers|vendor/ivqonsanada/enlightn/src/Analyzers|g" config/enlightn.php
                
                log_success "‚úÖ Configuration Enlightn mise √† jour pour Laravel 12"
            else
                log_warn "‚ö†Ô∏è  Fichier config/enlightn.php non trouv√©"
            fi
        else
            log_debug "‚úì Fork Enlightn (ivqonsanada/enlightn) non install√© - ignor√©"
        fi
    else
        log_debug "‚úì Laravel < 12 - configuration Enlightn standard"
    fi
    
    # G√©n√©rer les IDE helpers
    log_info "G√©n√©ration des IDE helpers..."
    php artisan ide-helper:generate 2>&1 | tee -a "$LOG_FILE" || log_debug "IDE helper:generate ignor√©"
    php artisan ide-helper:models --nowrite 2>&1 | tee -a "$LOG_FILE" || log_debug "IDE helper:models ignor√©"
    
    local duration=$(calculate_duration $start_time)
    log_success "‚úÖ Packages de d√©veloppement install√©s en $duration"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
#!/bin/bash
set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Fonction pour d√©tecter le r√©pertoire de travail correct
detect_working_directory() {
    # Si on est dans un container Docker avec /var/www/html (mont√© depuis ./src)
    if [ -d "/var/www/html" ] && [ -w "/var/www/html" ]; then
        echo "/var/www/html"
        return
    fi

    # Sinon, utiliser le r√©pertoire courant
    echo "$(pwd)"
}

# Fonction pour r√©parer la configuration Composer
fix_composer_config() {
    echo -e "${YELLOW}V√©rification de la configuration Composer...${NC}"

    # V√©rifier si le fichier config existe et est valide
    if [ -f "/var/composer/config.json" ]; then
        if ! python3 -m json.tool /var/composer/config.json >/dev/null 2>&1; then
            echo -e "${RED}Configuration Composer corrompue, r√©paration...${NC}"
            rm -f /var/composer/config.json
        fi
    fi

    # Cr√©er le r√©pertoire si n√©cessaire
    mkdir -p /var/composer

    # Initialiser une configuration propre
    composer config --global --no-interaction repos.packagist composer https://packagist.org 2>/dev/null || {
        echo -e "${YELLOW}Recr√©ation de la configuration Composer...${NC}"
        echo '{"config":{},"repositories":{"packagist.org":{"type":"composer","url":"https://packagist.org"}}}' > /var/composer/config.json
    }
}

# Fonction pour cr√©er un nouveau projet Laravel
create_laravel_project() {
    local target_dir="$1"

    echo -e "${YELLOW}Cr√©ation d'un nouveau projet Laravel dans $target_dir${NC}"

    # V√©rifier les permissions d'√©criture
    if [ ! -w "$target_dir" ]; then
        echo -e "${RED}Erreur : Pas de permission d'√©criture dans $target_dir${NC}"
        echo -e "${YELLOW}Essayez avec sudo ou v√©rifiez les permissions${NC}"
        exit 1
    fi

    # V√©rifier si le dossier est vide (ignorer les fichiers cach√©s comme .gitkeep)
    if [ "$(find "$target_dir" -mindepth 1 -maxdepth 1 ! -name '.*' | wc -l)" -gt 0 ]; then
        echo -e "${RED}Erreur : Le dossier $target_dir n'est pas vide${NC}"
        echo -e "${YELLOW}Contenu trouv√© :${NC}"
        ls -la "$target_dir"
        echo -e "${YELLOW}Veuillez vider le dossier ou supprimer son contenu avant l'installation${NC}"
        exit 1
    fi

    # Aller dans le dossier cible et installer Laravel directement dedans
    cd "$target_dir"

    # Cr√©er le projet Laravel dans le r√©pertoire courant (.)
    if ! COMPOSER_MEMORY_LIMIT=-1 composer create-project laravel/laravel . --no-interaction; then
        echo -e "${RED}√âchec de la cr√©ation du projet Laravel${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úì Projet Laravel cr√©√© avec succ√®s dans : $target_dir${NC}"
}

# Fonction pour installer un package avec gestion d'erreur
install_package() {
    local package=$1
    local max_attempts=3
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        echo -e "${YELLOW}Installation de $package (tentative $attempt/$max_attempts)...${NC}"

        # Nettoyer le cache avant l'installation
        composer clear-cache 2>/dev/null || true

        # Essayer d'installer le package
        if COMPOSER_MEMORY_LIMIT=-1 composer require "$package" --no-interaction --no-scripts --no-progress 2>&1; then
            echo -e "${GREEN}‚úì $package install√© avec succ√®s${NC}"

            # Ex√©cuter les scripts post-installation s√©par√©ment
            composer run-script post-autoload-dump --no-interaction 2>&1 || true

            return 0
        else
            echo -e "${RED}‚úó √âchec de l'installation de $package${NC}"

            if [ $attempt -lt $max_attempts ]; then
                echo -e "${YELLOW}Nouvelle tentative dans 5 secondes...${NC}"
                sleep 5
                attempt=$((attempt + 1))
            else
                echo -e "${RED}Impossible d'installer $package apr√®s $max_attempts tentatives${NC}"
                return 1
            fi
        fi
    done
}

# Fonction pour optimiser Composer
optimize_composer() {
    echo -e "${YELLOW}Optimisation de Composer...${NC}"

    # R√©parer la configuration d'abord
    fix_composer_config

    # D√©sactiver les plugins non essentiels (avec v√©rification)
    composer config --global allow-plugins.php-http/discovery false 2>/dev/null || true

    # Optimiser l'autoloader
    composer dump-autoload --optimize --no-interaction 2>/dev/null || true
}

# Installation principale
main() {
    echo -e "${YELLOW}üöÄ Installation optimis√©e de Laravel et ses d√©pendances${NC}"

    # D√©tecter le r√©pertoire de travail (normalement /var/www/html dans le container)
    WORKING_DIR=$(detect_working_directory)
    echo -e "${YELLOW}R√©pertoire de travail d√©tect√© : $WORKING_DIR${NC}"

    # V√©rifier la m√©moire disponible
    if command -v free &> /dev/null; then
        echo -e "${YELLOW}M√©moire disponible :${NC}"
        free -h | grep -E "^Mem|^Swap"
    fi

    # Optimiser Composer
    optimize_composer

    # V√©rifier si on a d√©j√† un projet Laravel
    if [ ! -f "$WORKING_DIR/composer.json" ]; then
        echo -e "${YELLOW}Aucun projet Laravel d√©tect√© dans $WORKING_DIR${NC}"
        echo -e "${YELLOW}Cr√©ation d'un nouveau projet Laravel...${NC}"
        create_laravel_project "$WORKING_DIR"
    else
        echo -e "${GREEN}Projet Laravel existant d√©tect√© dans $WORKING_DIR${NC}"

        # V√©rifier si c'est bien un projet Laravel
        if grep -q "laravel/framework" "$WORKING_DIR/composer.json"; then
            echo -e "${GREEN}‚úì Projet Laravel valide trouv√©${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Le composer.json existe mais ne semble pas √™tre un projet Laravel${NC}"
        fi
    fi

    # Se d√©placer dans le r√©pertoire de travail pour les installations
    cd "$WORKING_DIR"

    # Liste des packages √† installer
    packages=(
        "laravel/horizon"
        "laravel/telescope"
        "laravel/sanctum"
        # Ajoutez d'autres packages ici si n√©cessaire
    )

    # Installer chaque package s√©par√©ment
    for package in "${packages[@]}"; do
        if ! install_package "$package"; then
            echo -e "${RED}‚ö†Ô∏è  √âchec de l'installation de $package${NC}"
            # Continuer avec les autres packages
        fi

        # Pause entre les installations pour lib√©rer de la m√©moire
        sleep 2
    done

    # Installation finale et optimisation
    echo -e "${YELLOW}Finalisation de l'installation...${NC}"
    COMPOSER_MEMORY_LIMIT=-1 composer install --no-interaction --optimize-autoloader

    # Publier les assets si n√©cessaire
    if [ -f "artisan" ]; then
        echo -e "${YELLOW}Publication des assets...${NC}"
        php artisan vendor:publish --tag=horizon-config --force 2>/dev/null || true
        php artisan vendor:publish --tag=horizon-assets --force 2>/dev/null || true
    fi

    # Afficher l'emplacement des fichiers cr√©√©s
    echo -e "${GREEN}‚úì Installation termin√©e avec succ√®s !${NC}"
    echo -e "${YELLOW}Fichiers Laravel install√©s dans : $WORKING_DIR${NC}"
    echo -e "${YELLOW}Structure cr√©√©e :${NC}"
    ls -la "$WORKING_DIR" | head -10

    # V√©rifier la pr√©sence du package.json
    if [ -f "$WORKING_DIR/package.json" ]; then
        echo -e "${GREEN}‚úì package.json trouv√© pour npm${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  package.json non trouv√©${NC}"
    fi
}

# Ex√©cuter l'installation
main
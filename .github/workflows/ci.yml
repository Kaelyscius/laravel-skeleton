name: Laravel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PHP_VERSION: 8.4
  NODE_VERSION: 22

jobs:
  # ==========================================
  # JOB 1: TESTS & QUALITÉ
  # ==========================================
  tests:
    name: Tests & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      mariadb:
        image: mariadb:11.4
        env:
          MYSQL_ROOT_PASSWORD: laravel_test
          MYSQL_DATABASE: laravel_test
          MYSQL_USER: laravel_test
          MYSQL_PASSWORD: laravel_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mariadb-admin ping --silent"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=30s

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # ==========================================
      # Setup PHP avec extensions Laravel 12
      # ==========================================
      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, curl, dom, fileinfo, filter, gd, hash, intl, json, libxml, mbstring, openssl, pcre, pdo, pdo_mysql, redis, session, tokenizer, xml, zip
          coverage: xdebug
          tools: composer:v2
          ini-values: memory_limit=2G, max_execution_time=300, opcache.jit=0

      # ==========================================
      # Setup Node.js (mise à jour vers v22)
      # ==========================================
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/package-lock.json'

      # ==========================================
      # Cache Composer optimisé
      # ==========================================
      - name: 📋 Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-

      # ==========================================
      # Installation Composer optimisée
      # ==========================================
      - name: 🎵 Install Composer dependencies
        working-directory: src
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress --no-scripts
          composer dump-autoload --optimize

      # ==========================================
      # Cache NPM optimisé
      # ==========================================
      - name: 💾 Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: src/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-npm-${{ hashFiles('src/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-npm-
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      # ==========================================
      # Installation NPM
      # ==========================================
      - name: 📦 Install NPM dependencies
        working-directory: src
        run: npm ci --prefer-offline --no-audit

      # ==========================================
      # Configuration Laravel
      # ==========================================
      - name: ⚙️ Configure Laravel environment
        working-directory: src
        run: |
          # Copier .env.example vers .env
          cp .env.example .env
          
          # Configuration optimisée pour les tests
          cat >> .env << 'EOF'
          APP_ENV=testing
          APP_DEBUG=true
          
          # Base de données de test
          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=laravel_test
          DB_USERNAME=laravel_test
          DB_PASSWORD=laravel_test
          
          # Redis pour cache et sessions
          REDIS_HOST=127.0.0.1
          REDIS_PORT=6379
          CACHE_DRIVER=redis
          SESSION_DRIVER=redis
          QUEUE_CONNECTION=redis
          
          # Disable external services in tests
          MAIL_MAILER=array
          BROADCAST_DRIVER=log
          
          # Telescope (ne pas persister en test)
          TELESCOPE_ENABLED=false
          EOF
          
          # Générer la clé d'application
          php artisan key:generate --no-interaction

      # ==========================================
      # Build des assets
      # ==========================================
      - name: 🏗️ Build assets
        working-directory: src
        run: npm run build

      # ==========================================
      # Base de données
      # ==========================================
      - name: 🗄️ Wait for database and run migrations
        working-directory: src
        run: |
          # Attendre que MariaDB soit prêt
          timeout 60 bash -c 'until mysql -h127.0.0.1 -P3306 -ularavel_test -plaravel_test -e "SELECT 1" >/dev/null 2>&1; do sleep 2; done'
          echo "✅ Database connection successful"
          
          # Exécuter les migrations
          php artisan migrate --force --no-interaction
          echo "✅ Migrations completed"

      # ==========================================
      # Outils de qualité (utiliser les scripts Composer)
      # ==========================================
      - name: 🎨 Run Code Style Check (ECS)
        working-directory: src
        run: composer run check:cs

      - name: 🔍 Run Static Analysis (PHPStan)
        working-directory: src
        run: composer run analyse

      - name: 🔧 Run Rector (dry-run)
        working-directory: src
        run: composer run refactor

      - name: 💡 Run PHP Insights
        working-directory: src
        run: composer run insights

      # ==========================================
      # Tests avec coverage
      # ==========================================
      - name: 🧪 Run tests with coverage
        working-directory: src
        run: |
          composer run test:coverage
          # Copier les résultats pour l'upload
          if [ -f "coverage.xml" ]; then
            cp coverage.xml ../coverage.xml
          fi

      # ==========================================
      # Upload coverage report
      # ==========================================
      - name: 📊 Upload coverage to Codecov
        if: success() && hashFiles('coverage.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # ==========================================
      # Résumé des tests
      # ==========================================
      - name: 📋 Test Summary
        if: always()
        run: |
          echo "## 🎯 Laravel CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **PHP**: ${{ env.PHP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Laravel**: $(cd src && php artisan --version | cut -d' ' -f3)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Tools" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ECS (Code Style)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PHPStan (Static Analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Rector (Refactoring)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PHP Insights (Quality)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pest (Tests)" >> $GITHUB_STEP_SUMMARY


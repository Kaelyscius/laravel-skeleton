name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PHP_VERSION: 8.4
  NODE_VERSION: 22

jobs:
  # ==========================================
  # JOB 1: DEPENDENCY SECURITY SCAN
  # ==========================================
  dependencies:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # ==========================================
      # Setup for security scanning
      # ==========================================
      - name: üêò Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: none

      - name: üì¶ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # ==========================================
      # Composer Security Audit
      # ==========================================
      - name: üîç Install Composer dependencies (no scripts)
        working-directory: src
        run: composer install --no-interaction --no-scripts --no-dev --prefer-dist

      - name: üõ°Ô∏è Run Composer Security Audit
        working-directory: src
        run: |
          echo "üîç Running Composer security audit..."
          composer audit --format=json > composer-audit.json || echo "Vulnerabilities found"
          
          # Display human-readable results
          echo "üìä Composer Audit Results:"
          composer audit || echo "‚ö†Ô∏è Security issues detected"
          
          # Check if vulnerabilities were found
          if [ -f "composer-audit.json" ]; then
            vulns=$(jq '.advisories | length' composer-audit.json 2>/dev/null || echo "0")
            echo "üìà Found $vulns potential security advisories"
          fi

      # ==========================================
      # NPM Security Audit
      # ==========================================
      - name: üîç Install NPM dependencies
        working-directory: src
        run: npm ci --audit=false --fund=false

      - name: üõ°Ô∏è Run NPM Security Audit
        working-directory: src
        run: |
          echo "üîç Running NPM security audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || echo "Vulnerabilities found"
          
          # Display human-readable results
          echo "üìä NPM Audit Results:"
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Security issues detected"
          
          # Check vulnerability counts
          if [ -f "npm-audit.json" ]; then
            high=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            critical=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            echo "üìà Found $high high and $critical critical vulnerabilities"
          fi

      # ==========================================
      # Snyk Security Scan (if token available)
      # ==========================================
      - name: üì¶ Install Snyk CLI
        run: npm install -g snyk

      - name: üîë Check Snyk authentication
        id: snyk_check
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "snyk_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SNYK_TOKEN configured"
          else
            echo "snyk_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SNYK_TOKEN not configured - limited scanning"
          fi

      - name: üîê Authenticate Snyk
        if: steps.snyk_check.outputs.snyk_available == 'true'
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üõ°Ô∏è Snyk scan PHP dependencies
        working-directory: src
        run: |
          echo "üîç Scanning PHP dependencies with Snyk..."
          if [ "${{ steps.snyk_check.outputs.snyk_available }}" = "true" ]; then
            snyk test --severity-threshold=medium --file=composer.json --json > snyk-php.json || echo "Issues found"
            snyk test --severity-threshold=medium --file=composer.json || echo "‚ö†Ô∏è PHP vulnerabilities detected"
          else
            echo "‚ö†Ô∏è Running Snyk without authentication (rate limited)"
            snyk test --severity-threshold=high --file=composer.json || echo "‚ö†Ô∏è PHP vulnerabilities detected"
          fi
        continue-on-error: true

      - name: üõ°Ô∏è Snyk scan Node.js dependencies  
        working-directory: src
        run: |
          echo "üîç Scanning Node.js dependencies with Snyk..."
          if [ "${{ steps.snyk_check.outputs.snyk_available }}" = "true" ]; then
            snyk test --severity-threshold=medium --file=package.json --json > snyk-node.json || echo "Issues found"
            snyk test --severity-threshold=medium --file=package.json || echo "‚ö†Ô∏è Node.js vulnerabilities detected"
          else
            echo "‚ö†Ô∏è Running Snyk without authentication (rate limited)"
            snyk test --severity-threshold=high --file=package.json || echo "‚ö†Ô∏è Node.js vulnerabilities detected"
          fi
        continue-on-error: true

      # ==========================================
      # Security Summary
      # ==========================================
      - name: üìä Security Summary
        working-directory: src
        run: |
          echo "## üõ°Ô∏è Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Composer audit (PHP dependencies)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ NPM audit (Node.js dependencies)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Snyk scan (comprehensive vulnerability database)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Composer results
          if [ -f "composer-audit.json" ]; then
            comp_vulns=$(jq '.advisories | length' composer-audit.json 2>/dev/null || echo "0")
            echo "- **PHP Dependencies**: $comp_vulns advisories found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # NPM results  
          if [ -f "npm-audit.json" ]; then
            npm_high=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            npm_crit=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            echo "- **Node.js Dependencies**: $npm_high high, $npm_crit critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review and update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Configure SNYK_TOKEN secret for enhanced scanning" >> $GITHUB_STEP_SUMMARY
          echo "- Consider automated dependency updates" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # JOB 2: STATIC SECURITY ANALYSIS
  # ==========================================
  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # ==========================================
      # Security-focused static analysis
      # ==========================================
      - name: üêò Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: none

      - name: üîç Install dependencies for analysis
        working-directory: src
        run: composer install --no-interaction --no-scripts --prefer-dist

      - name: üîí Check for hardcoded secrets
        run: |
          echo "üîç Scanning for potential hardcoded secrets..."
          
          # Check for common secret patterns
          echo "Checking for potential secrets in PHP files..."
          if grep -r -n -i -E "(password|secret|key|token|api)" src/app/ --include="*.php" | grep -v -E "(function|class|interface|trait|comment)" | head -10; then
            echo "‚ö†Ô∏è Potential hardcoded credentials found (review manually)"
          else
            echo "‚úÖ No obvious hardcoded credentials detected"
          fi
          
          # Check .env files are not committed
          echo "Checking for committed .env files..."
          if find . -name ".env" -not -path "./src/.env.example" | head -5; then
            echo "‚ö†Ô∏è .env files found in repository"
          else
            echo "‚úÖ No .env files committed"
          fi

      - name: üîç PHPStan Security Rules
        working-directory: src
        run: |
          if [ -f "vendor/bin/phpstan" ] && [ -f "phpstan.neon" ]; then
            echo "üîç Running PHPStan with focus on security..."
            vendor/bin/phpstan analyse --memory-limit=1G --error-format=table || echo "‚ö†Ô∏è Static analysis issues found"
          else
            echo "‚ö†Ô∏è PHPStan not configured - skipping static analysis"
          fi

      # ==========================================
      # Framework-specific security checks
      # ==========================================
      - name: üõ°Ô∏è Laravel Security Checks
        working-directory: src
        run: |
          echo "üîç Laravel-specific security checks..."
          
          # Check APP_DEBUG in production
          echo "Checking APP_DEBUG configuration..."
          if grep -q "APP_DEBUG=true" .env.example; then
            echo "‚ö†Ô∏è APP_DEBUG=true in .env.example (should be false for production)"
          else
            echo "‚úÖ APP_DEBUG properly configured"
          fi
          
          # Check for HTTPS enforcement
          echo "Checking HTTPS configuration..."
          if grep -r "forceScheme\|requireHttps" app/ config/ || true; then
            echo "‚úÖ HTTPS enforcement configured"
          else
            echo "üí° Consider enforcing HTTPS in production"
          fi
          
          # Check CSRF protection
          echo "Checking CSRF middleware..."
          if grep -r "VerifyCsrfToken" app/Http/Middleware/ bootstrap/app.php || true; then
            echo "‚úÖ CSRF protection enabled"
          else
            echo "‚ö†Ô∏è CSRF protection may not be properly configured"
          fi

      # ==========================================
      # Security configuration review
      # ==========================================
      - name: ‚öôÔ∏è Security Configuration Review
        run: |
          echo "## üîí Security Configuration Review" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Checks" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Hardcoded secrets scan" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Static analysis (PHPStan)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Laravel security configuration" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Environment file checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Best Practices" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure APP_DEBUG=false in production" >> $GITHUB_STEP_SUMMARY
          echo "- Use HTTPS in production environments" >> $GITHUB_STEP_SUMMARY
          echo "- Keep dependencies updated" >> $GITHUB_STEP_SUMMARY
          echo "- Regular security audits" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # JOB 3: SNYK MONITORING (Main branch only)
  # ==========================================
  monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [dependencies, static-analysis]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js for Snyk
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Snyk CLI
        run: npm install -g snyk

      - name: üîë Check Snyk token for monitoring
        id: monitoring_check
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "monitoring_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SNYK_TOKEN available for monitoring"
          else
            echo "monitoring_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SNYK_TOKEN not configured - skipping monitoring setup"
          fi

      - name: üîê Authenticate Snyk for monitoring
        if: steps.monitoring_check.outputs.monitoring_available == 'true'
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üìä Setup Snyk monitoring
        if: steps.monitoring_check.outputs.monitoring_available == 'true'
        working-directory: src
        run: |
          echo "üìä Setting up continuous monitoring..."
          
          # Monitor PHP dependencies
          if [ -f "composer.json" ]; then
            snyk monitor --file=composer.json --project-name="${{ github.repository }}-php" || echo "PHP monitoring setup failed"
            echo "‚úÖ PHP dependencies monitoring enabled"
          fi
          
          # Monitor Node.js dependencies
          if [ -f "package.json" ]; then
            snyk monitor --file=package.json --project-name="${{ github.repository }}-node" || echo "Node monitoring setup failed"
            echo "‚úÖ Node.js dependencies monitoring enabled"
          fi
          
          echo "üîî Monitoring configured for main branch"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: üìä Monitoring Summary
        run: |
          echo "## üìä Security Monitoring Setup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.monitoring_check.outputs.monitoring_available }}" = "true" ]; then
            echo "‚úÖ **Continuous monitoring enabled**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- PHP dependencies monitored via Snyk" >> $GITHUB_STEP_SUMMARY
            echo "- Node.js dependencies monitored via Snyk" >> $GITHUB_STEP_SUMMARY
            echo "- Automatic alerts for new vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Monitoring not configured**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To enable monitoring:" >> $GITHUB_STEP_SUMMARY
            echo "1. Sign up at https://snyk.io" >> $GITHUB_STEP_SUMMARY
            echo "2. Add SNYK_TOKEN secret in GitHub repository settings" >> $GITHUB_STEP_SUMMARY
          fi
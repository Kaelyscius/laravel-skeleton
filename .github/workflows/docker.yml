name: Docker Build & Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-compose*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-compose*.yml'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  NAMESPACE: laravel-skeleton

jobs:
  # ==========================================
  # JOB 1: DOCKER VALIDATION
  # ==========================================
  validation:
    name: Docker Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # ==========================================
      # Docker setup and validation
      # ==========================================
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔍 Validate docker-compose files
        run: |
          echo "🔍 Validating docker-compose configuration..."

          # Check main docker-compose.yml
          if docker compose config >/dev/null 2>&1; then
            echo "✅ docker-compose.yml is valid"
          else
            echo "❌ docker-compose.yml validation failed"
            docker compose config
            exit 1
          fi

          # Check override files
          for override in docker-compose.*.yml; do
            if [ -f "$override" ]; then
              echo "Checking $override..."
              if docker compose -f docker-compose.yml -f "$override" config >/dev/null 2>&1; then
                echo "✅ $override is valid"
              else
                echo "❌ $override validation failed"
                docker compose -f docker-compose.yml -f "$override" config
              fi
            fi
          done

      - name: 🔍 Lint Dockerfiles
        run: |
          echo "🔍 Linting Dockerfiles..."
          
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          
          # Lint all Dockerfiles
          find . -name "Dockerfile*" -type f | while read -r dockerfile; do
            echo "Linting $dockerfile..."
            if ./hadolint "$dockerfile"; then
              echo "✅ $dockerfile passed hadolint"
            else
              echo "⚠️ $dockerfile has linting issues"
            fi
          done

      - name: 🔍 Check Docker security
        run: |
          echo "🔍 Checking Docker security best practices..."
          
          # Check for common security issues
          echo "Checking for root user usage..."
          if grep -r "USER root" docker/; then
            echo "⚠️ Found USER root in Dockerfiles - consider using non-root user"
          else
            echo "✅ No explicit root user usage found"
          fi
          
          echo "Checking for latest tags..."
          if grep -r ":latest" docker/ docker-compose*.yml; then
            echo "⚠️ Found :latest tags - consider using specific versions"
          else
            echo "✅ No :latest tags found"
          fi
          
          echo "Checking for hardcoded secrets..."
          if grep -r -E "(password|secret|key|token)" docker/ --include="*.dockerfile" --include="Dockerfile*"; then
            echo "⚠️ Potential hardcoded secrets found in Docker files"
          else
            echo "✅ No obvious hardcoded secrets in Docker files"
          fi

  # ==========================================
  # JOB 2: BUILD IMAGES
  # ==========================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validation
    strategy:
      matrix:
        service: [php, apache, node]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ==========================================
      # Prepare build environment
      # ==========================================
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # ==========================================
      # Check Docker registry credentials
      # ==========================================
      - name: 🔑 Check registry credentials
        id: registry_check
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "registry_available=true" >> $GITHUB_OUTPUT
            echo "✅ Docker registry credentials available"
          else
            echo "registry_available=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Docker registry credentials not configured"
          fi

      # ==========================================
      # Login to registry (if credentials available)
      # ==========================================
      - name: 🔐 Log in to Docker Hub
        if: steps.registry_check.outputs.registry_available == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ==========================================
      # Build and optionally push images
      # ==========================================
      - name: 🔨 Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: ${{ steps.registry_check.outputs.registry_available == 'true' && (github.event_name == 'push' && github.ref == 'refs/heads/main' || inputs.push_images) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      # ==========================================
      # Test built image
      # ==========================================
      - name: 🧪 Test ${{ matrix.service }} image
        run: |
          echo "🧪 Testing ${{ matrix.service }} image..."
          
          # Basic smoke test
          image_name="${{ env.REGISTRY }}/${{ env.NAMESPACE }}-${{ matrix.service }}:${{ github.sha }}"
          
          case "${{ matrix.service }}" in
            "php")
              echo "Testing PHP image..."
              docker run --rm "$image_name" php --version
              docker run --rm "$image_name" composer --version
              echo "✅ PHP image test passed"
              ;;
            "apache")
              echo "Testing Apache image..."
              docker run --rm "$image_name" apache2ctl -v
              echo "✅ Apache image test passed"
              ;;
            "node")
              echo "Testing Node.js image..."
              docker run --rm "$image_name" node --version
              docker run --rm "$image_name" npm --version
              echo "✅ Node.js image test passed"
              ;;
          esac

  # ==========================================
  # JOB 3: INTEGRATION TEST
  # ==========================================
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validation, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # ==========================================
      # Test complete stack
      # ==========================================
      - name: 🧪 Test complete Docker stack
        run: |
          echo "🧪 Testing complete Docker environment..."
          
          # Create test environment
          cp src/.env.example src/.env || echo "No .env.example found"
          
          # Add test configuration
          cat >> src/.env << 'EOF' || true
          APP_ENV=testing
          DB_CONNECTION=mysql
          DB_HOST=mariadb
          DB_DATABASE=laravel_test
          DB_USERNAME=laravel_test
          DB_PASSWORD=laravel_test
          REDIS_HOST=redis
          CACHE_DRIVER=redis
          SESSION_DRIVER=redis
          EOF
          
          # Start services
          echo "Starting Docker services..."
          docker compose up -d --build

          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30

          # Check service health
          echo "Checking service health..."
          docker compose ps

          # Test database connectivity
          echo "Testing database connectivity..."
          docker compose exec -T php php artisan migrate --force --no-interaction || echo "Migration failed (expected for fresh setup)"

          # Test web server
          echo "Testing web server..."
          if curl -f http://localhost || true; then
            echo "✅ Web server responding"
          else
            echo "⚠️ Web server not responding (may be expected)"
          fi

          # Cleanup
          echo "Cleaning up..."
          docker compose down -v
          
          echo "✅ Integration test completed"

      # ==========================================
      # Security scan of built images
      # ==========================================
      - name: 🛡️ Security scan images
        run: |
          echo "🛡️ Running security scan on built images..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan images for vulnerabilities
          for service in php apache node; do
            image="${{ env.REGISTRY }}/${{ env.NAMESPACE }}-${service}:${{ github.sha }}"
            echo "Scanning $image..."
            trivy image --severity HIGH,CRITICAL --format table "$image" || echo "Vulnerabilities found in $service"
          done

      # ==========================================
      # Build summary
      # ==========================================
      - name: 📊 Build Summary
        if: always()
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Images" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PHP 8.4 (Laravel runtime)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Apache 2.4 (Web server)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Node.js 22 (Asset builder)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tests Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dockerfile linting (hadolint)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ docker-compose validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security best practices check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image smoke tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration test" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "### Registry" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
              echo "- ✅ Images pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY
              echo "- 🔗 Registry: https://hub.docker.com/u/${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ℹ️ Images built locally (no registry configured)" >> $GITHUB_STEP_SUMMARY
              echo "- 💡 Add DOCKER_USERNAME and DOCKER_PASSWORD secrets to enable registry push" >> $GITHUB_STEP_SUMMARY
            fi
          fi
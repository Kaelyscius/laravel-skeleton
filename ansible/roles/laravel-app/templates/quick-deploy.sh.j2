#!/bin/bash
# Script de déploiement rapide Laravel
# Généré par Ansible pour {{ app_project_name }}

set -e

PROJECT_NAME="{{ app_project_name }}"
PROJECT_PATH="{{ app_deploy_path }}"
GIT_REPO="{{ app_git_repo }}"
GIT_BRANCH="{{ app_git_branch | default('main') }}"
ENVIRONMENT="{{ laravel_env }}"

echo "🚀 Déploiement rapide de {{ app_project_name }}"
echo "=====================================."

# Fonction pour afficher les messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fonction pour vérifier les prérequis
check_prerequisites() {
    log "Vérification des prérequis..."
    
    if ! command -v docker &> /dev/null; then
        log "❌ Docker n'est pas installé"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log "❌ Docker Compose n'est pas installé"
        exit 1
    fi
    
    if ! command -v git &> /dev/null; then
        log "❌ Git n'est pas installé"
        exit 1
    fi
    
    log "✅ Prérequis vérifiés"
}

# Fonction pour mettre à jour le code
update_code() {
    log "Mise à jour du code depuis Git..."
    cd "$PROJECT_PATH"
    
    # Sauvegarder les changements locaux
    git stash push -m "Ansible deployment $(date)"
    
    # Mettre à jour le code
    git fetch origin
    git checkout "$GIT_BRANCH"
    git pull origin "$GIT_BRANCH"
    
    log "✅ Code mis à jour"
}

# Fonction pour construire les conteneurs
build_containers() {
    log "Construction des conteneurs Docker..."
    cd "$PROJECT_PATH"
    
    # Arrêter les conteneurs existants
    docker-compose down || true
    
    # Construire et démarrer les conteneurs
    docker-compose up -d --build
    
    log "✅ Conteneurs construits et démarrés"
}

# Fonction pour installer les dépendances
install_dependencies() {
    log "Installation des dépendances..."
    cd "$PROJECT_PATH"
    
    # Attendre que les conteneurs soient prêts
    sleep 30
    
    # Installer les dépendances Composer
    if [ "$ENVIRONMENT" == "production" ]; then
        docker-compose exec -T php composer install --no-dev --optimize-autoloader
    else
        docker-compose exec -T php composer install
    fi
    
    # Installer les dépendances Node.js
    docker-compose exec -T node npm ci
    
    log "✅ Dépendances installées"
}

# Fonction pour configurer Laravel
configure_laravel() {
    log "Configuration de Laravel..."
    cd "$PROJECT_PATH"
    
    # Générer la clé d'application
    docker-compose exec -T php php artisan key:generate --force
    
    # Exécuter les migrations
    docker-compose exec -T php php artisan migrate --force
    
    # Optimisations pour la production
    if [ "$ENVIRONMENT" == "production" ]; then
        docker-compose exec -T php php artisan config:cache
        docker-compose exec -T php php artisan route:cache
        docker-compose exec -T php php artisan view:cache
        docker-compose exec -T php php artisan event:cache
        
        # Construire les assets
        docker-compose exec -T node npm run build
    else
        # Nettoyer les caches en développement
        docker-compose exec -T php php artisan config:clear
        docker-compose exec -T php php artisan route:clear
        docker-compose exec -T php php artisan view:clear
        docker-compose exec -T php php artisan event:clear
        
        # Construire les assets pour le développement
        docker-compose exec -T node npm run dev
    fi
    
    log "✅ Laravel configuré"
}

# Fonction pour vérifier l'état des services
check_services() {
    log "Vérification des services..."
    cd "$PROJECT_PATH"
    
    # Vérifier l'état des conteneurs
    docker-compose ps
    
    # Tester la connexion HTTP
    sleep 10
    if curl -f http://localhost:80 > /dev/null 2>&1; then
        log "✅ Application accessible"
    else
        log "⚠️  Application non accessible, vérifiez les logs"
        docker-compose logs --tail=50
    fi
}

# Fonction pour afficher les informations utiles
show_info() {
    log "Informations utiles:"
    echo "  📁 Projet: $PROJECT_NAME"
    echo "  🌐 URL: http://localhost"
    echo "  📊 Logs: docker-compose logs -f"
    echo "  🔄 Redémarrer: docker-compose restart"
    echo "  🛑 Arrêter: docker-compose down"
    echo "  📧 Mailhog: http://localhost:8025"
    echo "  🗄️ Adminer: http://localhost:8080"
    echo "  📊 Dozzle: http://localhost:9999"
}

# Fonction principale
main() {
    log "Début du déploiement..."
    
    check_prerequisites
    update_code
    build_containers
    install_dependencies
    configure_laravel
    check_services
    show_info
    
    log "🎉 Déploiement terminé avec succès !"
}

# Gestion des arguments
case "${1:-}" in
    "update")
        update_code
        ;;
    "build")
        build_containers
        ;;
    "install")
        install_dependencies
        ;;
    "configure")
        configure_laravel
        ;;
    "check")
        check_services
        ;;
    "info")
        show_info
        ;;
    *)
        main
        ;;
esac
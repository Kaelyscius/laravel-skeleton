#!/bin/bash
# Script de monitoring système
# Généré par Ansible pour {{ environment }}

LOG_FILE="/var/log/monitoring/system.log"
ALERT_SCRIPT="/usr/local/bin/alert-email.sh"

# Fonction de log
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Fonction d'alerte
send_alert() {
    local message="$1"
    log_message "ALERT: $message"
    if [[ -x "$ALERT_SCRIPT" && "{{ notifications.email.enabled | default(false) }}" == "true" ]]; then
        echo "$message" | "$ALERT_SCRIPT" "System Alert - {{ inventory_hostname }}"
    fi
}

# Vérifier l'utilisation du disque
check_disk_usage() {
    local usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ $usage -gt 85 ]]; then
        send_alert "Disk usage is at ${usage}% on {{ inventory_hostname }}"
    fi
    log_message "Disk usage: ${usage}%"
}

# Vérifier la mémoire
check_memory() {
    local mem_usage=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
    if (( $(echo "$mem_usage > 90" | bc -l) )); then
        send_alert "Memory usage is at ${mem_usage}% on {{ inventory_hostname }}"
    fi
    log_message "Memory usage: ${mem_usage}%"
}

# Vérifier la charge système
check_load() {
    local load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_cores=$(nproc)
    if (( $(echo "$load > $cpu_cores" | bc -l) )); then
        send_alert "High system load: $load on {{ inventory_hostname }}"
    fi
    log_message "System load: $load (cores: $cpu_cores)"
}

# Vérifier les services critiques
check_services() {
    local services=("docker" "ssh" "rsyslog")
    for service in "${services[@]}"; do
        if ! systemctl is-active --quiet "$service"; then
            send_alert "Service $service is down on {{ inventory_hostname }}"
        else
            log_message "Service $service: active"
        fi
    done
}

# Vérifier l'espace disque des logs
check_log_space() {
    local log_usage=$(du -sh /var/log | awk '{print $1}')
    log_message "Log directory size: $log_usage"
}

# Fonction principale
main() {
    # Créer le répertoire de log s'il n'existe pas
    mkdir -p "$(dirname "$LOG_FILE")"
    
    log_message "=== System monitoring check started ==="
    check_disk_usage
    check_memory
    check_load
    check_services
    check_log_space
    log_message "=== System monitoring check completed ==="
}

# Exécuter si appelé directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
#!/bin/bash
# Script de validation de la configuration Ansible
# Usage: ./validate.sh [environment]

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ANSIBLE_DIR="$(dirname "$SCRIPT_DIR")"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fonction pour v√©rifier la pr√©sence d'un fichier
check_file() {
    local file="$1"
    local description="$2"
    
    if [[ -f "$file" ]]; then
        log "‚úÖ $description: $file"
        return 0
    else
        error "‚ùå $description manquant: $file"
        return 1
    fi
}

# Fonction pour v√©rifier la pr√©sence d'un r√©pertoire
check_directory() {
    local dir="$1"
    local description="$2"
    
    if [[ -d "$dir" ]]; then
        log "‚úÖ $description: $dir"
        return 0
    else
        error "‚ùå $description manquant: $dir"
        return 1
    fi
}

# Fonction pour v√©rifier la syntaxe YAML
check_yaml_syntax() {
    local file="$1"
    local description="$2"
    
    if [[ -f "$file" ]]; then
        if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            log "‚úÖ Syntaxe YAML valide: $description"
            return 0
        else
            error "‚ùå Syntaxe YAML invalide: $description ($file)"
            return 1
        fi
    else
        warning "‚ö†Ô∏è  Fichier non trouv√© pour v√©rification YAML: $file"
        return 1
    fi
}

# Fonction pour v√©rifier les permissions
check_permissions() {
    local file="$1"
    local expected_perm="$2"
    local description="$3"
    
    if [[ -f "$file" ]]; then
        local actual_perm=$(stat -c "%a" "$file")
        if [[ "$actual_perm" == "$expected_perm" ]]; then
            log "‚úÖ Permissions correctes ($expected_perm): $description"
            return 0
        else
            warning "‚ö†Ô∏è  Permissions incorrectes ($actual_perm au lieu de $expected_perm): $description"
            return 1
        fi
    else
        error "‚ùå Fichier non trouv√© pour v√©rification permissions: $file"
        return 1
    fi
}

# Fonction pour v√©rifier les secrets
check_secrets() {
    local file="$1"
    local description="$2"
    
    if [[ -f "$file" ]]; then
        # V√©rifier la pr√©sence de secrets en dur
        local secrets_found=false
        
        # Patterns √† rechercher
        local patterns=(
            "password.*=.*['\"][^'\"]*['\"]"
            "secret.*=.*['\"][^'\"]*['\"]"
            "key.*=.*['\"][^'\"]*['\"]"
            "token.*=.*['\"][^'\"]*['\"]"
            "api_key.*=.*['\"][^'\"]*['\"]"
        )
        
        for pattern in "${patterns[@]}"; do
            if grep -i -E "$pattern" "$file" >/dev/null 2>&1; then
                warning "‚ö†Ô∏è  Possible secret d√©tect√© dans $description: $file"
                secrets_found=true
            fi
        done
        
        if [[ "$secrets_found" == false ]]; then
            log "‚úÖ Aucun secret d√©tect√©: $description"
            return 0
        else
            return 1
        fi
    else
        info "‚ÑπÔ∏è  Fichier non trouv√© pour v√©rification secrets: $file"
        return 0
    fi
}

# Fonction pour v√©rifier la structure des r√¥les
check_role_structure() {
    local role_name="$1"
    local role_path="$ANSIBLE_DIR/roles/$role_name"
    
    log "V√©rification du r√¥le: $role_name"
    
    # V√©rifier la pr√©sence des r√©pertoires
    local required_dirs=("tasks" "handlers" "templates" "vars" "defaults" "meta" "files")
    local missing_dirs=()
    
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$role_path/$dir" ]]; then
            missing_dirs+=("$dir")
        fi
    done
    
    if [[ ${#missing_dirs[@]} -eq 0 ]]; then
        log "‚úÖ Structure du r√¥le $role_name compl√®te"
    else
        warning "‚ö†Ô∏è  R√©pertoires manquants pour le r√¥le $role_name: ${missing_dirs[*]}"
    fi
    
    # V√©rifier les fichiers principaux
    check_file "$role_path/tasks/main.yml" "Tasks du r√¥le $role_name"
    check_file "$role_path/defaults/main.yml" "Defaults du r√¥le $role_name"
    check_file "$role_path/meta/main.yml" "Meta du r√¥le $role_name"
    
    # V√©rifier la syntaxe YAML
    check_yaml_syntax "$role_path/tasks/main.yml" "Tasks du r√¥le $role_name"
    check_yaml_syntax "$role_path/defaults/main.yml" "Defaults du r√¥le $role_name"
    check_yaml_syntax "$role_path/meta/main.yml" "Meta du r√¥le $role_name"
    
    # V√©rifier les secrets
    check_secrets "$role_path/tasks/main.yml" "Tasks du r√¥le $role_name"
    check_secrets "$role_path/defaults/main.yml" "Defaults du r√¥le $role_name"
}

# Fonction pour v√©rifier un environnement
check_environment() {
    local env="$1"
    
    log "V√©rification de l'environnement: $env"
    
    # V√©rifier l'inventaire
    check_file "$ANSIBLE_DIR/inventories/$env/hosts.yml" "Inventaire $env"
    check_yaml_syntax "$ANSIBLE_DIR/inventories/$env/hosts.yml" "Inventaire $env"
    check_secrets "$ANSIBLE_DIR/inventories/$env/hosts.yml" "Inventaire $env"
    
    # V√©rifier les variables d'environnement
    check_file "$ANSIBLE_DIR/group_vars/$env/main.yml" "Variables $env"
    check_yaml_syntax "$ANSIBLE_DIR/group_vars/$env/main.yml" "Variables $env"
    check_secrets "$ANSIBLE_DIR/group_vars/$env/main.yml" "Variables $env"
}

# Fonction pour v√©rifier les playbooks
check_playbooks() {
    log "V√©rification des playbooks"
    
    # V√©rifier le playbook principal
    check_file "$ANSIBLE_DIR/playbooks/deploy.yml" "Playbook de d√©ploiement"
    check_yaml_syntax "$ANSIBLE_DIR/playbooks/deploy.yml" "Playbook de d√©ploiement"
    check_secrets "$ANSIBLE_DIR/playbooks/deploy.yml" "Playbook de d√©ploiement"
}

# Fonction pour v√©rifier les scripts
check_scripts() {
    log "V√©rification des scripts"
    
    local scripts=("deploy.sh" "install.sh" "validate.sh")
    
    for script in "${scripts[@]}"; do
        check_file "$ANSIBLE_DIR/scripts/$script" "Script $script"
        check_permissions "$ANSIBLE_DIR/scripts/$script" "755" "Script $script"
    done
}

# Fonction pour v√©rifier la configuration g√©n√©rale
check_general_config() {
    log "V√©rification de la configuration g√©n√©rale"
    
    # V√©rifier la configuration Ansible
    check_file "$ANSIBLE_DIR/ansible.cfg" "Configuration Ansible"
    
    # V√©rifier la documentation
    check_file "$ANSIBLE_DIR/README.md" "Documentation principale"
    check_file "$ANSIBLE_DIR/docs/USAGE.md" "Guide d'utilisation"
    check_file "$ANSIBLE_DIR/docs/TECHNICAL.md" "Documentation technique"
    
    # V√©rifier les fichiers de s√©curit√©
    check_file "$ANSIBLE_DIR/.gitignore" "Fichier .gitignore"
    check_file "$ANSIBLE_DIR/.env.example" "Exemple de configuration"
    
    # V√©rifier que .env n'existe pas (s√©curit√©)
    if [[ -f "$ANSIBLE_DIR/.env" ]]; then
        warning "‚ö†Ô∏è  Fichier .env d√©tect√©. Assurez-vous qu'il n'est pas committ√© dans Git"
    else
        log "‚úÖ Aucun fichier .env d√©tect√© (s√©curit√©)"
    fi
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis"
    
    # V√©rifier Python
    if command -v python3 &> /dev/null; then
        log "‚úÖ Python3 install√©: $(python3 --version)"
    else
        error "‚ùå Python3 non install√©"
        return 1
    fi
    
    # V√©rifier Ansible (si install√©)
    if command -v ansible &> /dev/null; then
        log "‚úÖ Ansible install√©: $(ansible --version | head -n1)"
    else
        warning "‚ö†Ô∏è  Ansible non install√©. Utilisez ./scripts/install.sh pour l'installer"
    fi
    
    # V√©rifier Git
    if command -v git &> /dev/null; then
        log "‚úÖ Git install√©: $(git --version)"
    else
        error "‚ùå Git non install√©"
        return 1
    fi
}

# Fonction pour v√©rifier la syntaxe Ansible
check_ansible_syntax() {
    log "V√©rification de la syntaxe Ansible"
    
    if command -v ansible-playbook &> /dev/null; then
        # V√©rifier chaque environnement
        for env in production staging development; do
            if [[ -f "$ANSIBLE_DIR/inventories/$env/hosts.yml" ]]; then
                info "V√©rification syntaxe pour l'environnement: $env"
                if ansible-playbook \
                    -i "$ANSIBLE_DIR/inventories/$env/hosts.yml" \
                    "$ANSIBLE_DIR/playbooks/deploy.yml" \
                    --syntax-check >/dev/null 2>&1; then
                    log "‚úÖ Syntaxe Ansible valide pour $env"
                else
                    error "‚ùå Syntaxe Ansible invalide pour $env"
                fi
            fi
        done
    else
        warning "‚ö†Ô∏è  Ansible non install√©, impossible de v√©rifier la syntaxe"
    fi
}

# Fonction principale
main() {
    local environment="${1:-all}"
    local failed_checks=0
    
    log "üîç D√©but de la validation de la configuration Ansible"
    log "Environnement: $environment"
    log "R√©pertoire: $ANSIBLE_DIR"
    
    # V√©rifications g√©n√©rales
    check_prerequisites || ((failed_checks++))
    check_general_config || ((failed_checks++))
    check_playbooks || ((failed_checks++))
    check_scripts || ((failed_checks++))
    
    # V√©rifier les r√¥les
    local roles=("common" "docker" "laravel-app" "security" "monitoring" "nginx-proxy")
    for role in "${roles[@]}"; do
        check_role_structure "$role" || ((failed_checks++))
    done
    
    # V√©rifier les environnements
    if [[ "$environment" == "all" ]]; then
        for env in production staging development; do
            if [[ -d "$ANSIBLE_DIR/inventories/$env" ]]; then
                check_environment "$env" || ((failed_checks++))
            fi
        done
    else
        check_environment "$environment" || ((failed_checks++))
    fi
    
    # V√©rifier la syntaxe Ansible
    check_ansible_syntax || ((failed_checks++))
    
    # R√©sum√© final
    echo ""
    if [[ $failed_checks -eq 0 ]]; then
        log "üéâ Validation termin√©e avec succ√®s ! Aucune erreur d√©tect√©e."
    else
        error "‚ùå Validation termin√©e avec $failed_checks erreur(s) d√©tect√©e(s)."
        exit 1
    fi
}

# Ex√©cuter le script principal
main "$@"